syntax = "proto3";

option go_package = "dynamo/";
package dynamo;
import "google/protobuf/timestamp.proto";

service KeyValueStore {

  rpc Write(WriteRequest) returns (WriteResponse) {}
  rpc Read(ReadRequest) returns (ReadResponse) {}

  rpc Gossip(GossipMessage) returns (GossipAck) {}

  rpc AddNewNode(Node) returns (GossipAck) {}
  rpc RemoveNode(Node) returns (Empty) {}

  // temporarily send the replica to other machines to store 
  rpc HintedHandoff(HintedHandoffWriteRequest) returns (Empty) {}
  // when the node back alive again, it will send the replica back to the node
  rpc SendReplica(BulkWriteRequest) returns (WriteResponse) {}

}

message Empty {}

message KeyValue {
  string key = 1;
  string value = 2;
  VectorClock vector_clock = 3;
}

message ClockStruct {
    int64 clokcVal = 1;
    google.protobuf.Timestamp timestamp = 2;
}

message VectorClock {
  map<string, ClockStruct> timestamps = 1; // Map to hold the vector clock data
}

message BulkWriteRequest {
  repeated KeyValue keyValue = 1;
}

message HintedHandoffWriteRequest {
  KeyValue keyValue = 1;
  Node node = 2;
}

message WriteRequest {
  KeyValue keyValue = 1;
}

message WriteResponse {
  bool success = 1;
  string message = 2;
}

message ReadRequest {
  string key = 1;
}

message ReadResponse {
  repeated KeyValue keyValue = 1;
  bool success = 2;
  string message = 3;
}

message GossipMessage {
  repeated Node nodes = 1; // "repeated" for lists of items
}

message GossipAck {
  bool success = 1;
  string message = 2;
  MembershipList membershipList =3;
}

message MembershipList {
  repeated Node nodes = 1;
}


message Node {
  uint32 start = 1;
  string address = 2;
  uint32 port = 3;
}
